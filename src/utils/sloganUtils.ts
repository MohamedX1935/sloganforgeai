
// Mock data for demonstration - in a real app this would connect to an API
// that uses AI model like GPT-4 to generate slogans

export interface SloganFormData {
  companyName: string;
  industry: string;
  keywords: string[];
  tone: 'professional' | 'creative' | 'friendly' | 'bold';
}

export interface Slogan {
  id: string;
  text: string;
  rating?: number;
}

export const generateSlogans = async (formData: SloganFormData): Promise<Slogan[]> => {
  // This would be an API call to an AI service in a real implementation
  console.log('Generating slogans with data:', formData);
  
  // For demo purposes, we'll return mock data based on the input
  return new Promise((resolve) => {
    setTimeout(() => {
      const slogans = mockSloganGenerator(formData);
      resolve(slogans);
    }, 2000); // Simulate API delay
  });
};

const mockSloganGenerator = (formData: SloganFormData): Slogan[] => {
  const { companyName, industry, keywords, tone } = formData;
  
  // Create base templates based on tone
  const templates: Record<string, string[]> = {
    professional: [
      "{company}: Setting the Standard in {industry}",
      "Excellence in {industry} - {company}",
      "{keyword} Solutions by {company}",
      "Leading {industry} with {keyword} Innovation",
      "{company} - Redefining {industry}",
    ],
    creative: [
      "{company}: Where {keyword} Meets Imagination",
      "Dream Big with {company}",
      "{company}: {keyword} Redefined",
      "Imagine More with {company}'s {industry} Solutions",
      "{keyword} Magic by {company}",
    ],
    friendly: [
      "{company}: Your {keyword} Partner",
      "Feel at Home with {company}",
      "{company} - {industry} Made Friendly",
      "Your {industry} Journey Starts with {company}",
      "We're {company}: We Care About {keyword}",
    ],
    bold: [
      "{company}: Disrupting {industry} Forever",
      "Bold {keyword} Solutions by {company}",
      "No Limits. Just {company}.",
      "{company}: Dare to {keyword}",
      "Revolution in {industry}: {company}",
    ]
  };

  const selectedTemplates = templates[tone];
  const slogans: Slogan[] = [];

  for (let i = 0; i < 5; i++) {
    const template = selectedTemplates[i % selectedTemplates.length];
    const keyword = keywords[i % keywords.length] || keywords[0];
    
    let slogan = template
      .replace('{company}', companyName)
      .replace('{industry}', industry)
      .replace('{keyword}', keyword);
    
    slogans.push({
      id: `slogan-${i + 1}`,
      text: slogan
    });
  }
  
  // Add some additional generic slogans for variety
  const genericTemplates = [
    "{company}: The Future of {industry}",
    "Choose {company} for {keyword} Excellence",
    "{keyword} First. {company} Always.",
    "Your Vision, Our {company} Solution",
    "Experience the {company} Difference"
  ];

  for (let i = 0; i < 5; i++) {
    const template = genericTemplates[i % genericTemplates.length];
    const keyword = keywords[(i + 2) % keywords.length] || keywords[0];
    
    let slogan = template
      .replace('{company}', companyName)
      .replace('{industry}', industry)
      .replace('{keyword}', keyword);
    
    slogans.push({
      id: `slogan-extra-${i + 1}`,
      text: slogan
    });
  }
  
  return slogans;
};

export const rateSloganMock = (id: string, rating: number): void => {
  console.log(`Rated slogan ${id} with ${rating} stars`);
  // In a real app, this would call an API to store the rating
};

export const downloadSloganAsPDF = (
  slogan: string, 
  options: { 
    font: string; 
    color: string; 
    size: string; 
    format: 'portrait' | 'landscape';
    logo?: File;
  }
): void => {
  console.log('Downloading slogan as PDF with options:', options);
  console.log('Slogan text:', slogan);
  
  // In a real implementation, this would use a library like jsPDF to generate
  // a PDF file and trigger a download
  
  // Mock download by creating a text file
  const element = document.createElement('a');
  const file = new Blob([`Your Slogan: ${slogan}\n\nGenerated by SloganForge AI`], {type: 'text/plain'});
  element.href = URL.createObjectURL(file);
  element.download = `slogan-${Date.now()}.txt`;
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};
